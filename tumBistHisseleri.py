import yfinance as yf
import pandas as pd
import time
from tqdm import tqdm  # Ä°lerleme Ã§ubuÄŸu iÃ§in

# --- 1. BIST hisse sembollerini dosyadan oku ---
def get_bist_symbols_from_csv(filename="Sirket_Kodlari.csv"):
    """CSV dosyasÄ±ndan BIST hisse sembollerini okur."""
    try:
        df = pd.read_csv(filename)
        # CSV'deki ilk sÃ¼tunun sembolleri iÃ§erdiÄŸini varsayÄ±yoruz
        # SÃ¼tun adÄ±nÄ± kendi dosyanÄ±za gÃ¶re gÃ¼ncelleyebilirsiniz, Ã¶rn: "Symbol" veya "Kod"
        symbols = df.iloc[:, 0].tolist()
        print(f"'{filename}' dosyasÄ±ndan {len(symbols)} adet hisse sembolÃ¼ okundu.")
        return symbols
    except FileNotFoundError:
        print(f"HATA: '{filename}' dosyasÄ± bulunamadÄ±.")
        print("LÃ¼tfen BIST hisse sembollerini iÃ§eren bir CSV dosyasÄ± oluÅŸturun.")
        return None

# --- 2. Filtreleme ve veri Ã§ekme fonksiyonu ---
def filter_bist_stocks(low=4, high=10):
    """BIST hisselerini yfinance kullanarak Ã§eker ve filtreler."""
    symbols = get_bist_symbols_from_csv()
    if symbols is None:
        return pd.DataFrame()  # BoÅŸ DataFrame dÃ¶ndÃ¼r

    print("Hisse verileri Ã§ekiliyor ve filtreleniyor...")
    results = []

    # tqdm ile ilerleme Ã§ubuÄŸu oluÅŸturarak sÃ¼reci takip et
    for symbol in tqdm(symbols, desc="Hisseler taranÄ±yor"):
        try:
            # yfinance iÃ§in BIST sembollerinin sonuna ".IS" eklenmelidir
            ticker_symbol = f"{symbol}.IS"
            
            # Ticker nesnesini oluÅŸtur
            hisse = yf.Ticker(ticker_symbol)
            
            # .info, hisse hakkÄ±nda anlÄ±k ve temel bilgileri iÃ§eren bir sÃ¶zlÃ¼ktÃ¼r
            info = hisse.info

            # Gerekli verilerin varlÄ±ÄŸÄ±nÄ± kontrol et
            prev_close = info.get('previousClose')
            # Bazen 'currentPrice' yerine 'regularMarketPrice' dolu olabilir
            last_price = info.get('currentPrice', info.get('regularMarketPrice')) 

            # Veriler eksikse veya sÄ±fÄ±rsa bu hisseyi atla
            if not prev_close or not last_price or prev_close == 0:
                continue

            # YÃ¼zdelik deÄŸiÅŸimi hesapla
            change_pct = ((last_price - prev_close) / prev_close) * 100

            # Filtreleme koÅŸulunu uygula
            if low <= change_pct <= high:
                results.append({
                    "Hisse": symbol,
                    "Ã–nceki KapanÄ±ÅŸ": round(prev_close, 2),
                    "Son Fiyat": round(last_price, 2),
                    "DeÄŸiÅŸim (%)": round(change_pct, 2)
                })

            # Yahoo Finance API'sini yormamak ve engellenmemek iÃ§in Ã§ok kÄ±sa bir bekleme ekle
            time.sleep(3)

        except Exception as e:
            # BazÄ± semboller (Ã¶rn. yeni halka arzlar) Yahoo Finance'te bulunamayabilir.
            # Hata veren hisseleri atlayÄ±p yolumuza devam ediyoruz.
            print(f"Hata ({symbol}): {e}") # HatalarÄ± gÃ¶rmek isterseniz bu satÄ±rÄ± aktif edebilirsiniz
            continue

    return pd.DataFrame(results)

# --- 3. Ana program ---
def main():
    df = filter_bist_stocks(4, 10)
    
    if df.empty:
        print("\nBugÃ¼n %4 - %10 arasÄ± artan bir BIST hissesi bulunamadÄ±.")
    else:
        df = df.sort_values("DeÄŸiÅŸim (%)", ascending=False)
        print("\nğŸ“ˆ %4 - %10 arasÄ± artan BIST hisseleri:")
        # to_string() ile tÃ¼m sonuÃ§larÄ± konsolda gÃ¶ster
        print(df.to_string())
        
        output_filename = "bist_artanlar_yfinance.csv"
        df.to_csv(output_filename, index=False, encoding="utf-8-sig")
        print(f"\nSonuÃ§lar '{output_filename}' dosyasÄ±na kaydedildi âœ…")

if __name__ == "__main__":
    main()