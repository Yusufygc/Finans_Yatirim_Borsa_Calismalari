import requests
import pandas as pd
from datetime import datetime
import time

# --- 1. API Bilgisi ---
# BURAYA KENDÄ° FÄ°NNHUB API ANAHTARINIZI GÄ°RÄ°N
API_KEY = ""
# Borsa kodu ABD borsalarÄ± iÃ§in "US" olarak gÃ¼ncellendi
EXCHANGE = "US"

# --- 2. Hisse sembollerini Finnhub'tan al ---
def get_us_symbols():
    """ABD borsalarÄ±ndaki hisse senedi sembollerini alÄ±r."""
    url = f"https://finnhub.io/api/v1/stock/symbol?exchange={EXCHANGE}&token={API_KEY}"
    r = requests.get(url)
    r.raise_for_status()  # Hata durumunda programÄ± durdurur
    symbols = r.json()
    # ABD sembolleri iÃ§in ".IS" uzantÄ±sÄ± gerekmediÄŸinden filtre kaldÄ±rÄ±ldÄ±.
    return [s["symbol"] for s in symbols]

# --- 3. Hisse verisini Finnhub'tan al ---
def get_quote(symbol):
    """Belirtilen sembol iÃ§in anlÄ±k fiyat verisini Ã§eker."""
    url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={API_KEY}"
    r = requests.get(url)
    r.raise_for_status()
    data = r.json()
    return data

# --- 4. Filtreleme fonksiyonu ---
def filter_us_stocks(low=4, high=10):
    """ABD hisselerini belirtilen yÃ¼zde aralÄ±ÄŸÄ±na gÃ¶re filtreler."""
    symbols = get_us_symbols()
    print(f"{len(symbols)} adet hisse senedi bulundu. Veriler Ã§ekiliyor...")

    results = []
    # Ã‡ok fazla sembol olduÄŸu iÃ§in sÃ¼reci hÄ±zlandÄ±rmak ve hatalarÄ± azaltmak adÄ±na
    # genellikle borsa dÄ±ÅŸÄ± varlÄ±klarÄ± belirten sembolleri atlÄ±yoruz.
    filtered_symbols = [s for s in symbols if '.' not in s and '-' not in s]
    print(f"Filtreleme sonrasÄ± {len(filtered_symbols)} adet sembol iÅŸlenecek...")


    for i, symbol in enumerate(filtered_symbols):
        try:
            data = get_quote(symbol)
            # 'pc' (previous close) deÄŸeri 0 ise veya veri boÅŸsa atla
            if not data or "pc" not in data or data["pc"] == 0:
                continue

            prev_close = data["pc"]
            last_price = data["c"]
            change_pct = ((last_price - prev_close) / prev_close) * 100

            if low <= change_pct <= high:
                results.append({
                    "Hisse": symbol,
                    "Ã–nceki KapanÄ±ÅŸ": round(prev_close, 2),
                    "Son Fiyat": round(last_price, 2),
                    "DeÄŸiÅŸim (%)": round(change_pct, 2)
                })
        except Exception as e:
            # Hata alÄ±nan sembolleri ve hatayÄ± yazdÄ±r ama devam et
            print(f"Hata ({symbol}): {e}")

        # API limitlerine takÄ±lmamak iÃ§in her istek arasÄ±nda kÄ±sa bir bekleme yapÄ±lÄ±r.
        time.sleep(0.3) # Ãœcretsiz planlar iÃ§in bekleme sÃ¼resini biraz artÄ±rmak daha gÃ¼venli olabilir.

    return pd.DataFrame(results)

# --- 5. Ana program ---
def main():
    # GÃ¼nlÃ¼k %4 ile %10 arasÄ± artan hisseleri filtrele
    df = filter_us_stocks(4, 10)

    if df.empty:
        print("\nBugÃ¼n %4 - %10 arasÄ± artan bir hisse senedi bulunamadÄ±.")
    else:
        # SonuÃ§larÄ± DeÄŸiÅŸim (%) sÃ¼tununa gÃ¶re bÃ¼yÃ¼kten kÃ¼Ã§Ã¼ÄŸe sÄ±rala
        df = df.sort_values("DeÄŸiÅŸim (%)", ascending=False)
        print("\nğŸ“ˆ %4 - %10 arasÄ± artan hisseler:")
        print(df.to_string()) # DataFrame'in tamamÄ±nÄ± gÃ¶stermek iÃ§in .to_string()

        # SonuÃ§larÄ± CSV dosyasÄ±na kaydet
        output_filename = "us_stock_gainers.csv"
        df.to_csv(output_filename, index=False, encoding="utf-8-sig")
        print(f"\nSonuÃ§lar '{output_filename}' dosyasÄ±na kaydedildi âœ…")

if __name__ == "__main__":
    main()